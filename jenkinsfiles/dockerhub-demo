pipeline {
    agent none
    stages {
       stage('Build') {
           agent {
               docker {
                   image 'maven:3.5.0'
               }
           }
           steps {
                   sh 'mvn clean install -DskipTests=true -B'
           }
       }
       stage('Build container') {
             agent any
             steps {
                 script {
                     sh "docker build -t liatrio/petclinic-tomcat:${env.BRANCH_NAME} ."
                     if ( env.BRANCH_NAME == 'master' ) {
                         containerVersion = getVersionFromContainer("liatrio/petclinic-tomcat:${env.BRANCH_NAME}")
                         failIfVersionExists("liatrio","petclinic-tomcat",containerVersion)
                         sh "docker build -t liatrio/petclinic-tomcat:${containerVersion} ."
                     }
                 }
             }
       }
       stage('Run local Container') {
           agent any
           steps {
               sh 'docker rm -f petclinic-tomcat-temp || true'
               sh "docker run -d --network=bridge --name petclinic-tomcat-temp liatrio/petclinic-tomcat:${env.BRANCH_NAME}"
           }
       }
       stage('Smoke-Test') {
           agent {
               docker {
                   image 'maven:3.5.0'
                   args '--network=bridge'
               }
           }
           steps {
               sh "cd regression-suite"
               sh "mvn clean -B test -DPETCLINIC_URL=http://petclinic-tomcat:8080/petclinic/"
           }
       }
       stage('Stop local container') {
           agent any
           steps {
               sh 'docker rm -f petclinic-tomcat-temp || true'
           }
       }
       stage('Push to dockerhub') {
           agent any
           steps {
                script {
                    if ( env.BRANCH_NAME == 'master' )
                        sh "docker push liatrio/petclinic-tomcat:${containerVersion}"
                    else sh "docker push liatrio/petclinic-tomcat:${env.BRANCH_NAME}"
                }
           }
       }
   }
   post {
        failure {
            slackSend (channel:"#petclinic", color: "CF1318", message: "${env.JOB_NAME} Failed (<${env.BUILD_URL}|Open>)")
        }
   }
}
